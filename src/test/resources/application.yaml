#server.port: 8080
#spring.main.allow-bean-definition-overriding: true
#
#spring.kafka.client-id: stream-client
#
#spring.kafka.bootstrap-servers: ${spring.embedded.kafka.brokers}
#kafka.bootstrap-servers: ${spring.embedded.kafka.brokers}
#
#spring.kafka.producer.properties.schema.registry.url: not-used
#spring.kafka.producer.value-serializer: kafka.demo.testdata.CustomKafkaAvroSerializer
#spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.group-id: showcase-producer-id
#
#spring.kafka.consumer.properties.schema.registry.url: not-used
#spring.kafka.consumer.value-deserializer: kafka.demo.testdata.CustomKafkaAvroDeserializer
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.group-id: showcase-consumer-id
#spring.kafka.auto.offset.reset: earliest
#
#spring.kafka.producer.auto.register.schemas: true
#spring.kafka.properties.specific.avro.reader: true




#spring.application.name: dev-interview-kafkaspring
#
##spring.kafka.streams.bootstrap-servers: localhost:9092
#
##spring.kafka.streams.binder.brokers.configuration.schema.registry.url: http://localhost:8081
#
##spring.kafka.streams.binder.configuration.state.dir: state-store
#
##spring.kafka.client-id: stream-client
#
#
#
#spring.kafka.streams.application-id: streams-join-test
#
#spring.cloud.stream.binder.brokers: ${spring.embedded.kafka.brokers}
#
#spring.cloud.stream.binder.configuration.schema.registry.url: mock://fk-join-test
#
#        customer.topic.name=Customer
#        customer.topic.partitions=2
#        customer.topic.replication.factor=1
#
#        customerRefined.topic.name=CustomerRefined
#        customerRefined.topic.partitions=2
#        customerRefined.topic.replication.factor=1
#
#        balance.purchase.topic.name=Balance
#        balance.purchase.topic.partitions=2
#        balance.purchase.topic.replication.factor=1
#
#        customerBalance.interest.topic.name=CustomerBalance
#        customerBalance.topic.partitions=1
#        customerBalance.topic.replication.factor=1